
# It was adapted by Candace Savonen for the OTTR_template https://github.com/jhudsl/OTTR_Template.

# This code was adapted by Carrie Wright to enable automated rendering of the site associated with this repository

name: Render html

# Controls when the action will run. Triggers the workflow on push
# events only for the master branch
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.Rmd'
      - styles.css
      - _site.yml
      - resources/images/*.png
      - resources/images/favicon.ico

jobs:
  yaml-check:
    name: Load user automation choices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # Use the yaml-env-action action.
      - name: Load environment from YAML
        uses: doughepi/yaml-env-action@v1.0.0
        with:
            files: config_automation.yml # Pass a space-separated list of configuration files. Rightmost files take precedence.

    outputs:
      rendering_docker_image: "${{ env.RENDERING_DOCKER_IMAGE }}"

  # This workflow contains a single job called "build-all"
  render-main:
    needs: yaml-check
    runs-on: ubuntu-latest
    container:
      image: ${{needs.yaml-check.outputs.rendering_docker_image}}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v4
        with:
          # get the full repo
          fetch-depth: 0
          # use github PAT
          token: ${{ secrets.GH_PAT }}

      # We want a fresh run of the renders each time - so first delete old html files
      - name: Delete old *.html
        run: Rscript -e "rmarkdown::clean_site(input = 'pages', preview = FALSE)"

       # Now we want to get the data from gsheet, make it available to all of the Rmds and render all the html files from the Rmd files
      - name: get data one
        id: 'get_sheet_2024'
        uses: jroehl/gsheet.action@v2.1.1
        with:
          #spreadsheetId: '1wDMNC6BD2AaIwh_GOkPTpl1tvAyLwVBQgAvOD2rYrX0'
          spreadsheetId: '140zwFy280ZV-C4P22tEKjH53_wH4hE418h3QxSqnezE'
          commands: |
            [
              { "command": "getWorksheet", "args": { "worksheetTitle": "Test2024" }},
              { "command": "getData", "args": { "range": "'Test2024'!A1:BI51" }}
            ]
          #commands: | # list of commands, specified as a valid JSON string
          #  [
          #    { "command": "getWorksheet", "args": { "worksheetTitle": "Form Responses 1" }},
          #    { "command": "getData", "args": { "range": "'Form Responses 1'!A1:BI53" } }
          #  ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}

      - name: dump results 2024
        env:
          RESULTS2024: ${{ steps.get_sheet_2024.outputs.results }}
        run: echo "$RESULTS2024"

      - name: get data two
        id: 'get_sheet_2025'
        uses: jroehl/gsheet.action@v2.1.1
        with:
          #spreadsheetId: '1lGs2p6qyJDAWuM4L2rX7PZi5CQ2GkeL2iXnjnrzhBnQ'
          spreadsheetId: '140zwFy280ZV-C4P22tEKjH53_wH4hE418h3QxSqnezE'
          #commands: | # list of commands, specified as a valid JSON string
          #  [
          #    { "command": "getWorksheet", "args": { "worksheetTitle": "Form Responses 1" }},
          #    { "command": "getData", "args": { "range": "'Form Responses 1'!A:BW" } }
          #  ]
          commands: |
            [
              { "command": "getWorksheet", "args": { "worksheetTitle": "Test2025" }},
              { "command": "getData", "args": { "range": "'Test2025'!A1:BW19" } }
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}

      - name: dump results 2025
        env:
          RESULTS2025: ${{ steps.get_sheet_2025.outputs.results }}
        run: echo "$RESULTS2025"

        # ADD new get data __ here following pattern above for each year
        # update the name, id, spreadsheetId, and range.
        # add result below in Run render script action (two places)

        # Run the analysis and Render
      #- name: Run render script
      #  id: site
      #  env:
          # the output of the action above!
    #      RESULTS2024: ${{ steps.get_sheet_2024.outputs.results }}
    #      RESULTS2025: ${{ steps.get_sheet_2025.outputs.results }}
          # ADD a new RESULTS# here
    #    run: | #add the --data_in_# "$RESULTS#" below
    #      Rscript --vanilla "resources/render.R" --data_in_2024 "$RESULTS2024" --data_in_2025 "$RESULTS2025"

      # This checks on the steps before it and makes sure that they completed.
      # If the renders didn't complete we don't want to commit the file changes
    #  - name: Check on render steps
    #    if: steps.site.outcome != 'success'
    #    run: |
    #      echo site status ${{steps.site.outcome}}
    #      exit 1

# Commit the rendered site files - html files and site_libs files
# The git reset step will remove any other files created in this workflow, such as API keys
    #  - name: Commit rendered site files
    #    run: |
    #      git config --global --add safe.directory $GITHUB_WORKSPACE
    #      git config --global user.name 'github-actions[bot]'
    #      git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    #      git add --force docs/*
    #      git commit -m 'Render site' || echo "No changes to commit"
    #      git reset --hard HEAD
    #      git pull --rebase --allow-unrelated-histories --strategy-option=ours
    #      git push origin main || echo "No changes to push"
